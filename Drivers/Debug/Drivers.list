
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000db4  08000db4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dd4  08000dd4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000dd4  08000dd4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dd4  08000dd4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dd4  08000dd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd8  08000dd8  00010dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000004  08000de0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000de0  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a69  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000883  00000000  00000000  00021a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000e19  00000000  00000000  00022319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  00023138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f0  00000000  00000000  00023390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fc2  00000000  00000000  00023580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003084  00000000  00000000  00024542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000af23  00000000  00000000  000275c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000324e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000774  00000000  00000000  0003253c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d9c 	.word	0x08000d9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000d9c 	.word	0x08000d9c

08000170 <delay_ms>:
#include "lcd.h"
#include "stm32f103x6.h"
#include "Stm32_F103C6_GPIO.h"
GPIO_PIN_CONFIG_T PinCfg ;
static void delay_ms(uint32_t delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < delay; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < delay; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PIN_NUMBER = RS;
 80001b0:	4b52      	ldr	r3, [pc, #328]	; (80002fc <LCD_GPIO_init+0x150>)
 80001b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b8:	4b50      	ldr	r3, [pc, #320]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ba:	2204      	movs	r2, #4
 80001bc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001be:	4b4f      	ldr	r3, [pc, #316]	; (80002fc <LCD_GPIO_init+0x150>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c4:	494d      	ldr	r1, [pc, #308]	; (80002fc <LCD_GPIO_init+0x150>)
 80001c6:	484e      	ldr	r0, [pc, #312]	; (8000300 <LCD_GPIO_init+0x154>)
 80001c8:	f000 fb36 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = RW;
 80001cc:	4b4b      	ldr	r3, [pc, #300]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d4:	4b49      	ldr	r3, [pc, #292]	; (80002fc <LCD_GPIO_init+0x150>)
 80001d6:	2204      	movs	r2, #4
 80001d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001da:	4b48      	ldr	r3, [pc, #288]	; (80002fc <LCD_GPIO_init+0x150>)
 80001dc:	2201      	movs	r2, #1
 80001de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001e0:	4946      	ldr	r1, [pc, #280]	; (80002fc <LCD_GPIO_init+0x150>)
 80001e2:	4847      	ldr	r0, [pc, #284]	; (8000300 <LCD_GPIO_init+0x154>)
 80001e4:	f000 fb28 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = EN;
 80001e8:	4b44      	ldr	r3, [pc, #272]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001ee:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f0:	4b42      	ldr	r3, [pc, #264]	; (80002fc <LCD_GPIO_init+0x150>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001f6:	4b41      	ldr	r3, [pc, #260]	; (80002fc <LCD_GPIO_init+0x150>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001fc:	493f      	ldr	r1, [pc, #252]	; (80002fc <LCD_GPIO_init+0x150>)
 80001fe:	4840      	ldr	r0, [pc, #256]	; (8000300 <LCD_GPIO_init+0x154>)
 8000200:	f000 fb1a 	bl	8000838 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8000204:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <LCD_GPIO_init+0x150>)
 8000206:	2201      	movs	r2, #1
 8000208:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800020a:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <LCD_GPIO_init+0x150>)
 800020c:	2204      	movs	r2, #4
 800020e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <LCD_GPIO_init+0x150>)
 8000212:	2201      	movs	r2, #1
 8000214:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000216:	4939      	ldr	r1, [pc, #228]	; (80002fc <LCD_GPIO_init+0x150>)
 8000218:	4839      	ldr	r0, [pc, #228]	; (8000300 <LCD_GPIO_init+0x154>)
 800021a:	f000 fb0d 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_1;
 800021e:	4b37      	ldr	r3, [pc, #220]	; (80002fc <LCD_GPIO_init+0x150>)
 8000220:	2202      	movs	r2, #2
 8000222:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <LCD_GPIO_init+0x150>)
 8000226:	2204      	movs	r2, #4
 8000228:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <LCD_GPIO_init+0x150>)
 800022c:	2201      	movs	r2, #1
 800022e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000230:	4932      	ldr	r1, [pc, #200]	; (80002fc <LCD_GPIO_init+0x150>)
 8000232:	4833      	ldr	r0, [pc, #204]	; (8000300 <LCD_GPIO_init+0x154>)
 8000234:	f000 fb00 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_2;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <LCD_GPIO_init+0x150>)
 800023a:	2204      	movs	r2, #4
 800023c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023e:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <LCD_GPIO_init+0x150>)
 8000240:	2204      	movs	r2, #4
 8000242:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <LCD_GPIO_init+0x150>)
 8000246:	2201      	movs	r2, #1
 8000248:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800024a:	492c      	ldr	r1, [pc, #176]	; (80002fc <LCD_GPIO_init+0x150>)
 800024c:	482c      	ldr	r0, [pc, #176]	; (8000300 <LCD_GPIO_init+0x154>)
 800024e:	f000 faf3 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_3;
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <LCD_GPIO_init+0x150>)
 8000254:	2208      	movs	r2, #8
 8000256:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000258:	4b28      	ldr	r3, [pc, #160]	; (80002fc <LCD_GPIO_init+0x150>)
 800025a:	2204      	movs	r2, #4
 800025c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800025e:	4b27      	ldr	r3, [pc, #156]	; (80002fc <LCD_GPIO_init+0x150>)
 8000260:	2201      	movs	r2, #1
 8000262:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000264:	4925      	ldr	r1, [pc, #148]	; (80002fc <LCD_GPIO_init+0x150>)
 8000266:	4826      	ldr	r0, [pc, #152]	; (8000300 <LCD_GPIO_init+0x154>)
 8000268:	f000 fae6 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_4;
 800026c:	4b23      	ldr	r3, [pc, #140]	; (80002fc <LCD_GPIO_init+0x150>)
 800026e:	2210      	movs	r2, #16
 8000270:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <LCD_GPIO_init+0x150>)
 8000274:	2204      	movs	r2, #4
 8000276:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000278:	4b20      	ldr	r3, [pc, #128]	; (80002fc <LCD_GPIO_init+0x150>)
 800027a:	2201      	movs	r2, #1
 800027c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027e:	491f      	ldr	r1, [pc, #124]	; (80002fc <LCD_GPIO_init+0x150>)
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <LCD_GPIO_init+0x154>)
 8000282:	f000 fad9 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_5;
 8000286:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <LCD_GPIO_init+0x150>)
 8000288:	2220      	movs	r2, #32
 800028a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <LCD_GPIO_init+0x150>)
 800028e:	2204      	movs	r2, #4
 8000290:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <LCD_GPIO_init+0x150>)
 8000294:	2201      	movs	r2, #1
 8000296:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000298:	4918      	ldr	r1, [pc, #96]	; (80002fc <LCD_GPIO_init+0x150>)
 800029a:	4819      	ldr	r0, [pc, #100]	; (8000300 <LCD_GPIO_init+0x154>)
 800029c:	f000 facc 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_6;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <LCD_GPIO_init+0x150>)
 80002a2:	2240      	movs	r2, #64	; 0x40
 80002a4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <LCD_GPIO_init+0x150>)
 80002a8:	2204      	movs	r2, #4
 80002aa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <LCD_GPIO_init+0x150>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002b2:	4912      	ldr	r1, [pc, #72]	; (80002fc <LCD_GPIO_init+0x150>)
 80002b4:	4812      	ldr	r0, [pc, #72]	; (8000300 <LCD_GPIO_init+0x154>)
 80002b6:	f000 fabf 	bl	8000838 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_7;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <LCD_GPIO_init+0x150>)
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <LCD_GPIO_init+0x150>)
 80002c2:	2204      	movs	r2, #4
 80002c4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <LCD_GPIO_init+0x150>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002cc:	490b      	ldr	r1, [pc, #44]	; (80002fc <LCD_GPIO_init+0x150>)
 80002ce:	480c      	ldr	r0, [pc, #48]	; (8000300 <LCD_GPIO_init+0x154>)
 80002d0:	f000 fab2 	bl	8000838 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002da:	4809      	ldr	r0, [pc, #36]	; (8000300 <LCD_GPIO_init+0x154>)
 80002dc:	f000 fb36 	bl	800094c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <LCD_GPIO_init+0x154>)
 80002e8:	f000 fb30 	bl	800094c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <LCD_GPIO_init+0x154>)
 80002f4:	f000 fb2a 	bl	800094c <MCAL_GPIO_WritePin>

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000020 	.word	0x20000020
 8000300:	40010800 	.word	0x40010800

08000304 <lcd_kick>:

	//LCD_CTRL &= ~(1<<RW); //write
	MCAL_GPIO_WritePin(LCD_CTRL, RW, GPIO_PIN_RESET);
}
void lcd_kick(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <lcd_kick+0x28>)
 8000310:	f000 fb1c 	bl	800094c <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000314:	2032      	movs	r0, #50	; 0x32
 8000316:	f7ff ff2b 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <lcd_kick+0x28>)
 8000322:	f000 fb13 	bl	800094c <MCAL_GPIO_WritePin>

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010800 	.word	0x40010800

08000330 <lcd_send_command>:
void lcd_send_command(unsigned char command)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4619      	mov	r1, r3
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <lcd_send_command+0x40>)
 8000340:	f000 faf6 	bl	8000930 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <lcd_send_command+0x40>)
 800034c:	f000 fafe 	bl	800094c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <lcd_send_command+0x40>)
 8000358:	f000 faf8 	bl	800094c <MCAL_GPIO_WritePin>
	delay_ms(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f7ff ff07 	bl	8000170 <delay_ms>
	lcd_kick();
 8000362:	f7ff ffcf 	bl	8000304 <lcd_kick>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800

08000374 <lcd_init>:
void lcd_init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	delay_ms(20);
 8000378:	2014      	movs	r0, #20
 800037a:	f7ff fef9 	bl	8000170 <delay_ms>
	LCD_GPIO_init();
 800037e:	f7ff ff15 	bl	80001ac <LCD_GPIO_init>
	delay_ms(15);
 8000382:	200f      	movs	r0, #15
 8000384:	f7ff fef4 	bl	8000170 <delay_ms>

	lcd_clear();
 8000388:	f000 f80e 	bl	80003a8 <lcd_clear>
	lcd_send_command(LCD_8BIT_MODE_2_LINE);
 800038c:	2038      	movs	r0, #56	; 0x38
 800038e:	f7ff ffcf 	bl	8000330 <lcd_send_command>
	lcd_send_command(LCD_ENTERY_MODE_INC_SHIFT_OFF);
 8000392:	2006      	movs	r0, #6
 8000394:	f7ff ffcc 	bl	8000330 <lcd_send_command>
	lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
 8000398:	2080      	movs	r0, #128	; 0x80
 800039a:	f7ff ffc9 	bl	8000330 <lcd_send_command>
	lcd_send_command(LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_ON);
 800039e:	200d      	movs	r0, #13
 80003a0:	f7ff ffc6 	bl	8000330 <lcd_send_command>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <lcd_clear>:
		}
	}

}
void lcd_clear(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CLEAR);
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff ffbf 	bl	8000330 <lcd_send_command>
	}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <UART_IRQ_Callback>:
unsigned int IRQ_Flag = 0 ;
char *ch = "ahmed";


void UART_IRQ_Callback (void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	MCAL_USART_Transmit_String(USART1, &ch, enable);
 80003bc:	2200      	movs	r2, #0
 80003be:	4903      	ldr	r1, [pc, #12]	; (80003cc <UART_IRQ_Callback+0x14>)
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <UART_IRQ_Callback+0x18>)
 80003c2:	f000 fc7d 	bl	8000cc0 <MCAL_USART_Transmit_String>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000
 80003d0:	40013800 	.word	0x40013800

080003d4 <clock_init>:

void clock_init()
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	//Enable port A clock
	RCC_GPIOA_CLK_EN();
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <clock_init+0x30>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <clock_init+0x30>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
	//Enable port B clock
	RCC_GPIOB_CLK_EN();
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <clock_init+0x30>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <clock_init+0x30>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <clock_init+0x30>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <clock_init+0x30>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	6193      	str	r3, [r2, #24]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <main>:
		for(j=0;j<255;j++);
}


int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
	clock_init();
 800040e:	f7ff ffe1 	bl	80003d4 <clock_init>
	lcd_init();
 8000412:	f7ff ffaf 	bl	8000374 <lcd_init>
	lcd_clear();
 8000416:	f7ff ffc7 	bl	80003a8 <lcd_clear>
	USART_CONFIG_t uartCFG;
	uartCFG.Baud_Rate = USART_BaudRate_9600;
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	713b      	strb	r3, [r7, #4]
	uartCFG.HW_FLW_CTRL = USART_HW_FLW_NONE;
 800041e:	2300      	movs	r3, #0
 8000420:	72bb      	strb	r3, [r7, #10]
	uartCFG.IRQ_Enable = USART_IRQ_RXNE;
 8000422:	2320      	movs	r3, #32
 8000424:	727b      	strb	r3, [r7, #9]
	uartCFG.IRQ_HANDLER = UART_IRQ_Callback;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <main+0x44>)
 8000428:	60fb      	str	r3, [r7, #12]
	uartCFG.Parity = USART_Parity_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	723b      	strb	r3, [r7, #8]
	uartCFG.Word_Length = USART_WordLength_8BIT;
 800042e:	2300      	movs	r3, #0
 8000430:	71fb      	strb	r3, [r7, #7]
	uartCFG.Stop_Bits = USART_StopBits_1B;
 8000432:	2300      	movs	r3, #0
 8000434:	717b      	strb	r3, [r7, #5]
	uartCFG.USART_Mode = USART_Mode_Transmitter_Receiver;
 8000436:	230c      	movs	r3, #12
 8000438:	71bb      	strb	r3, [r7, #6]
	MCAL_USART_Init(USART1, &uartCFG);
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <main+0x48>)
 8000440:	f000 fb5e 	bl	8000b00 <MCAL_USART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <main+0x48>)
 8000446:	f000 faf5 	bl	8000a34 <MCAL_UART_GPIO_Set_Pins>
	while(1){
 800044a:	e7fe      	b.n	800044a <main+0x42>
 800044c:	080003b9 	.word	0x080003b9
 8000450:	40013800 	.word	0x40013800

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000458:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	; (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	; (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 fc67 	bl	8000d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff ffbf 	bl	8000408 <main>

0800048a <LoopForever>:

LoopForever:
  b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000498:	08000ddc 	.word	0x08000ddc
  ldr r2, =_sbss
 800049c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004a0:	20000064 	.word	0x20000064

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <EXTI0_IRQHandler>:
1: selected trigger request occurred
This bit is set when the selected edge event arrives on the external interrupt line. This bit is
cleared by writing a ‘1’ into the bit.*/

void EXTI0_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	//clear pending flag
	EXTI->PR |= 1<<0;
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <EXTI0_IRQHandler+0x1c>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <EXTI0_IRQHandler+0x1c>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[0]();
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <EXTI0_IRQHandler+0x20>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4798      	blx	r3
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40010400 	.word	0x40010400
 80004c8:	20000024 	.word	0x20000024

080004cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <EXTI1_IRQHandler+0x1c>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <EXTI1_IRQHandler+0x1c>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <EXTI1_IRQHandler+0x20>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	4798      	blx	r3
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010400 	.word	0x40010400
 80004ec:	20000024 	.word	0x20000024

080004f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <EXTI2_IRQHandler+0x1c>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <EXTI2_IRQHandler+0x1c>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <EXTI2_IRQHandler+0x20>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010400 	.word	0x40010400
 8000510:	20000024 	.word	0x20000024

08000514 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <EXTI3_IRQHandler+0x1c>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <EXTI3_IRQHandler+0x1c>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <EXTI3_IRQHandler+0x20>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4798      	blx	r3

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010400 	.word	0x40010400
 8000534:	20000024 	.word	0x20000024

08000538 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <EXTI4_IRQHandler+0x1c>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <EXTI4_IRQHandler+0x1c>)
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <EXTI4_IRQHandler+0x20>)
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	4798      	blx	r3
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010400 	.word	0x40010400
 8000558:	20000024 	.word	0x20000024

0800055c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5; GP_IRQ_callBack[5]();}
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	2b00      	cmp	r3, #0
 800056a:	d008      	beq.n	800057e <EXTI9_5_IRQHandler+0x22>
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a22      	ldr	r2, [pc, #136]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 8000572:	f043 0320 	orr.w	r3, r3, #32
 8000576:	6153      	str	r3, [r2, #20]
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <EXTI9_5_IRQHandler+0xa4>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6; GP_IRQ_callBack[6]();}
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	2b00      	cmp	r3, #0
 8000588:	d008      	beq.n	800059c <EXTI9_5_IRQHandler+0x40>
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 8000590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <EXTI9_5_IRQHandler+0xa4>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7; GP_IRQ_callBack[7]();}
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d008      	beq.n	80005ba <EXTI9_5_IRQHandler+0x5e>
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b2:	6153      	str	r3, [r2, #20]
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <EXTI9_5_IRQHandler+0xa4>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8; GP_IRQ_callBack[8]();}
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d008      	beq.n	80005d8 <EXTI9_5_IRQHandler+0x7c>
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <EXTI9_5_IRQHandler+0xa4>)
 80005d4:	6a1b      	ldr	r3, [r3, #32]
 80005d6:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9; GP_IRQ_callBack[9]();}
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <EXTI9_5_IRQHandler+0x9a>
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <EXTI9_5_IRQHandler+0xa0>)
 80005ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ee:	6153      	str	r3, [r2, #20]
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <EXTI9_5_IRQHandler+0xa4>)
 80005f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f4:	4798      	blx	r3

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010400 	.word	0x40010400
 8000600:	20000024 	.word	0x20000024

08000604 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10; GP_IRQ_callBack[10]();}
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <EXTI15_10_IRQHandler+0x22>
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 800061a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800061e:	6153      	str	r3, [r2, #20]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <EXTI15_10_IRQHandler+0xc0>)
 8000622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000624:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11; GP_IRQ_callBack[11]();}
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800062e:	2b00      	cmp	r3, #0
 8000630:	d008      	beq.n	8000644 <EXTI15_10_IRQHandler+0x40>
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000638:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <EXTI15_10_IRQHandler+0xc0>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12; GP_IRQ_callBack[12]();}
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d008      	beq.n	8000662 <EXTI15_10_IRQHandler+0x5e>
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065a:	6153      	str	r3, [r2, #20]
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <EXTI15_10_IRQHandler+0xc0>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13; GP_IRQ_callBack[13]();}
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <EXTI15_10_IRQHandler+0x7c>
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <EXTI15_10_IRQHandler+0xc0>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067e:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14; GP_IRQ_callBack[14]();}
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <EXTI15_10_IRQHandler+0x9a>
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6153      	str	r3, [r2, #20]
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <EXTI15_10_IRQHandler+0xc0>)
 800069a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800069c:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15; GP_IRQ_callBack[15]();}
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d008      	beq.n	80006bc <EXTI15_10_IRQHandler+0xb8>
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <EXTI15_10_IRQHandler+0xbc>)
 80006b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <EXTI15_10_IRQHandler+0xc0>)
 80006b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ba:	4798      	blx	r3

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40010400 	.word	0x40010400
 80006c4:	20000024 	.word	0x20000024

080006c8 <Get_Bit_Location>:
 *      Author: Ahmed Adel Wafdy
 */
#include "Stm32_F103C6_GPIO.h"


uint8_t Get_Bit_Location(uint16_t PinNumber){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006d8:	f000 80a5 	beq.w	8000826 <Get_Bit_Location+0x15e>
 80006dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006e0:	f300 80a3 	bgt.w	800082a <Get_Bit_Location+0x162>
 80006e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006e8:	f000 809b 	beq.w	8000822 <Get_Bit_Location+0x15a>
 80006ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006f0:	f300 809b 	bgt.w	800082a <Get_Bit_Location+0x162>
 80006f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f8:	f000 8091 	beq.w	800081e <Get_Bit_Location+0x156>
 80006fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000700:	f300 8093 	bgt.w	800082a <Get_Bit_Location+0x162>
 8000704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000708:	f000 8087 	beq.w	800081a <Get_Bit_Location+0x152>
 800070c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000710:	f300 808b 	bgt.w	800082a <Get_Bit_Location+0x162>
 8000714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000718:	d07d      	beq.n	8000816 <Get_Bit_Location+0x14e>
 800071a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800071e:	f300 8084 	bgt.w	800082a <Get_Bit_Location+0x162>
 8000722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000726:	d074      	beq.n	8000812 <Get_Bit_Location+0x14a>
 8000728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072c:	dc7d      	bgt.n	800082a <Get_Bit_Location+0x162>
 800072e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000732:	d06c      	beq.n	800080e <Get_Bit_Location+0x146>
 8000734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000738:	dc77      	bgt.n	800082a <Get_Bit_Location+0x162>
 800073a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800073e:	d064      	beq.n	800080a <Get_Bit_Location+0x142>
 8000740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000744:	dc71      	bgt.n	800082a <Get_Bit_Location+0x162>
 8000746:	2b80      	cmp	r3, #128	; 0x80
 8000748:	d05d      	beq.n	8000806 <Get_Bit_Location+0x13e>
 800074a:	2b80      	cmp	r3, #128	; 0x80
 800074c:	dc6d      	bgt.n	800082a <Get_Bit_Location+0x162>
 800074e:	2b20      	cmp	r3, #32
 8000750:	dc48      	bgt.n	80007e4 <Get_Bit_Location+0x11c>
 8000752:	2b00      	cmp	r3, #0
 8000754:	dd69      	ble.n	800082a <Get_Bit_Location+0x162>
 8000756:	3b01      	subs	r3, #1
 8000758:	2b1f      	cmp	r3, #31
 800075a:	d866      	bhi.n	800082a <Get_Bit_Location+0x162>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <Get_Bit_Location+0x9c>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	080007eb 	.word	0x080007eb
 8000768:	080007ef 	.word	0x080007ef
 800076c:	0800082b 	.word	0x0800082b
 8000770:	080007f3 	.word	0x080007f3
 8000774:	0800082b 	.word	0x0800082b
 8000778:	0800082b 	.word	0x0800082b
 800077c:	0800082b 	.word	0x0800082b
 8000780:	080007f7 	.word	0x080007f7
 8000784:	0800082b 	.word	0x0800082b
 8000788:	0800082b 	.word	0x0800082b
 800078c:	0800082b 	.word	0x0800082b
 8000790:	0800082b 	.word	0x0800082b
 8000794:	0800082b 	.word	0x0800082b
 8000798:	0800082b 	.word	0x0800082b
 800079c:	0800082b 	.word	0x0800082b
 80007a0:	080007fb 	.word	0x080007fb
 80007a4:	0800082b 	.word	0x0800082b
 80007a8:	0800082b 	.word	0x0800082b
 80007ac:	0800082b 	.word	0x0800082b
 80007b0:	0800082b 	.word	0x0800082b
 80007b4:	0800082b 	.word	0x0800082b
 80007b8:	0800082b 	.word	0x0800082b
 80007bc:	0800082b 	.word	0x0800082b
 80007c0:	0800082b 	.word	0x0800082b
 80007c4:	0800082b 	.word	0x0800082b
 80007c8:	0800082b 	.word	0x0800082b
 80007cc:	0800082b 	.word	0x0800082b
 80007d0:	0800082b 	.word	0x0800082b
 80007d4:	0800082b 	.word	0x0800082b
 80007d8:	0800082b 	.word	0x0800082b
 80007dc:	0800082b 	.word	0x0800082b
 80007e0:	080007ff 	.word	0x080007ff
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	d00c      	beq.n	8000802 <Get_Bit_Location+0x13a>
 80007e8:	e01f      	b.n	800082a <Get_Bit_Location+0x162>
		case GPIO_PIN_0:
			return 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01e      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_1:
			return 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	e01c      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_2:
			return 8;
 80007f2:	2308      	movs	r3, #8
 80007f4:	e01a      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_3:
			return 12;
 80007f6:	230c      	movs	r3, #12
 80007f8:	e018      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_4:
			return 16;
 80007fa:	2310      	movs	r3, #16
 80007fc:	e016      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_5:
			return 20;
 80007fe:	2314      	movs	r3, #20
 8000800:	e014      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_6:
			return 24;
 8000802:	2318      	movs	r3, #24
 8000804:	e012      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_7:
			return 28;
 8000806:	231c      	movs	r3, #28
 8000808:	e010      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_8:
			return 0;
 800080a:	2300      	movs	r3, #0
 800080c:	e00e      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_9:
			return 4;
 800080e:	2304      	movs	r3, #4
 8000810:	e00c      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_10:
			return 8;
 8000812:	2308      	movs	r3, #8
 8000814:	e00a      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_11:
			return 12;
 8000816:	230c      	movs	r3, #12
 8000818:	e008      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_12:
			return 16;
 800081a:	2310      	movs	r3, #16
 800081c:	e006      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_13:
			return 20;
 800081e:	2314      	movs	r3, #20
 8000820:	e004      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_14:
			return 24;
 8000822:	2318      	movs	r3, #24
 8000824:	e002      	b.n	800082c <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_15:
			return 28;
 8000826:	231c      	movs	r3, #28
 8000828:	e000      	b.n	800082c <Get_Bit_Location+0x164>
			break;
	}
	return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop

08000838 <MCAL_GPIO_Init>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinConfig: Pointer to GPIO_PIN_CONFIG_T structure that contains the configurations of GPIO pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_PIN_CONFIG_T *PinConfig){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..E)
	//Port configuration register high (GPIOx_CRH) (x=A..E)
	volatile uint32_t *ConfiguredRegister = NULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
	uint32_t pin_config = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
	if(PinConfig->GPIO_PIN_NUMBER < GPIO_PIN_8){
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2bff      	cmp	r3, #255	; 0xff
 8000850:	d802      	bhi.n	8000858 <MCAL_GPIO_Init+0x20>
		ConfiguredRegister = &(GPIOx->CRL);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e002      	b.n	800085e <MCAL_GPIO_Init+0x26>
	}
	else{
		ConfiguredRegister = &(GPIOx->CRH);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3304      	adds	r3, #4
 800085c:	60fb      	str	r3, [r7, #12]
	}
	// We should clear registers CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) &= ~(0xf << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff30 	bl	80006c8 <Get_Bit_Location>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	230f      	movs	r3, #15
 800086e:	4093      	lsls	r3, r2
 8000870:	43da      	mvns	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	401a      	ands	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	601a      	str	r2, [r3, #0]
	// if GPIO ====>Output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	2b05      	cmp	r3, #5
 8000882:	d00b      	beq.n	800089c <MCAL_GPIO_Init+0x64>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	2b04      	cmp	r3, #4
 800088a:	d007      	beq.n	800089c <MCAL_GPIO_Init+0x64>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	2b07      	cmp	r3, #7
 8000892:	d003      	beq.n	800089c <MCAL_GPIO_Init+0x64>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	2b06      	cmp	r3, #6
 800089a:	d10a      	bne.n	80008b2 <MCAL_GPIO_Init+0x7a>
	{
		//set CNFy[1:0],MODEy[1:0]
		pin_config = ( ( (PinConfig->GPIO_MODE-4) << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED) ) &0x0f ;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	3b04      	subs	r3, #4
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	78d2      	ldrb	r2, [r2, #3]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	e02b      	b.n	800090a <MCAL_GPIO_Init+0xd2>
	}
	// if GPIO ====>Input 00: Input mode (reset state)
	else{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog)){
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d003      	beq.n	80008c2 <MCAL_GPIO_Init+0x8a>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	789b      	ldrb	r3, [r3, #2]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d106      	bne.n	80008d0 <MCAL_GPIO_Init+0x98>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( (PinConfig->GPIO_MODE) << 2 ) | 0x0) &0x0f);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	e01c      	b.n	800090a <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	789b      	ldrb	r3, [r3, #2]
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d102      	bne.n	80008de <MCAL_GPIO_Init+0xa6>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( GPIO_MODE_INPUT_FLO << 2 ) | 0x0) &0x0f);
 80008d8:	2304      	movs	r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	e015      	b.n	800090a <MCAL_GPIO_Init+0xd2>
		}
		//Input with pull-up / pull-down
		else{
			pin_config = (( ( GPIO_MODE_INPUT_PU << 2 ) | 0x0) &0x0f);
 80008de:	2308      	movs	r3, #8
 80008e0:	60bb      	str	r3, [r7, #8]
			if(PinConfig->GPIO_MODE ==  GPIO_MODE_INPUT_PU){
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d107      	bne.n	80008fa <MCAL_GPIO_Init+0xc2>
				//PxODR register 1 Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PIN_NUMBER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	8812      	ldrh	r2, [r2, #0]
 80008f2:	431a      	orrs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	e007      	b.n	800090a <MCAL_GPIO_Init+0xd2>
			}
			else{
				//PxODR register 0 Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN_NUMBER);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	8812      	ldrh	r2, [r2, #0]
 8000902:	43d2      	mvns	r2, r2
 8000904:	401a      	ands	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) |= (pin_config << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff feda 	bl	80006c8 <Get_Bit_Location>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	fa03 f202 	lsl.w	r2, r3, r2
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	431a      	orrs	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <MCAL_GPIO_WritePort>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- value: value which will be written on port
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePort(GPIO_t *GPIOx,uint8_t value){
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR = (uint32_t)value;
 800093c:	78fa      	ldrb	r2, [r7, #3]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60da      	str	r2, [r3, #12]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <MCAL_GPIO_WritePin>:
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @param[in]	- value: value which will be written on pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx,uint16_t PinNumber,uint8_t value){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
 8000958:	4613      	mov	r3, r2
 800095a:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET){
 800095c:	787b      	ldrb	r3, [r7, #1]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <MCAL_GPIO_WritePin+0x1e>
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 8000962:	887a      	ldrh	r2, [r7, #2]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	611a      	str	r2, [r3, #16]
0: No action on the corresponding ODRx bit
1: Reset the corresponding ODRx bit*/
		GPIOx->BRR =(uint32_t)PinNumber;

	}
}
 8000968:	e002      	b.n	8000970 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 800096a:	887a      	ldrh	r2, [r7, #2]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	615a      	str	r2, [r3, #20]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
	...

0800097c <MCAL_RCC_GetSYS_CLKFreq>:
 * @brief		- After a system reset, the HSI oscillator is selected as system clock. When a clock source is
used directly or through the PLL as system clock, it is not possible to stop it.
 * @retval		- uint32_t : amount of Frequancy generated by system clock
 * Note			- none
 * */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
Set and cleared by hardware to indicate which clock source is used as system clock.
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable*/
	switch ((RCC->CFGR >> 2)&0b11){
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	f003 0303 	and.w	r3, r3, #3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d00a      	beq.n	80009a4 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 800098e:	2b02      	cmp	r3, #2
 8000990:	d80a      	bhi.n	80009a8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d002      	beq.n	80009a0 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 800099a:	e005      	b.n	80009a8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
		case 0:
			return HSI_RC_CLK;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800099e:	e003      	b.n	80009a8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 1:
			return HSE_CLK;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80009a2:	e001      	b.n	80009a8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 2:
			return 16000000;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80009a6:	e7ff      	b.n	80009a8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
	}
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000
 80009b4:	007a1200 	.word	0x007a1200
 80009b8:	00f42400 	.word	0x00f42400

080009bc <MCAL_RCC_Get_HCLKFreq>:
 * @Fn			- MCAL_RCC_Get_HCLKFreq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====>
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_HCLKFreq(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  );
 80009c0:	f7ff ffdc 	bl	800097c <MCAL_RCC_GetSYS_CLKFreq>
 80009c4:	4602      	mov	r2, r0
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <MCAL_RCC_Get_HCLKFreq+0x20>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	091b      	lsrs	r3, r3, #4
 80009cc:	f003 030f 	and.w	r3, r3, #15
 80009d0:	4903      	ldr	r1, [pc, #12]	; (80009e0 <MCAL_RCC_Get_HCLKFreq+0x24>)
 80009d2:	5ccb      	ldrb	r3, [r1, r3]
 80009d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	08000dc4 	.word	0x08000dc4

080009e4 <MCAL_RCC_Get_PCLK1Freq>:
 * @Fn			- MCAL_RCC_Get_PCLK1Freq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK1Freq(void){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  );
 80009e8:	f7ff ffe8 	bl	80009bc <MCAL_RCC_Get_HCLKFreq>
 80009ec:	4602      	mov	r2, r0
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MCAL_RCC_Get_PCLK1Freq+0x20>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	4903      	ldr	r1, [pc, #12]	; (8000a08 <MCAL_RCC_Get_PCLK1Freq+0x24>)
 80009fa:	5ccb      	ldrb	r3, [r1, r3]
 80009fc:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000
 8000a08:	08000dbc 	.word	0x08000dbc

08000a0c <MCAL_RCC_Get_PCLK2Freq>:
 * @Fn			- MCAL_RCC_GetSYS_PCLK2Freq
 * @brief		- Get HCLK source and Compute PCLK2 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK2Freq(void){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  );
 8000a10:	f7ff ffd4 	bl	80009bc <MCAL_RCC_Get_HCLKFreq>
 8000a14:	4602      	mov	r2, r0
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <MCAL_RCC_Get_PCLK2Freq+0x20>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	0adb      	lsrs	r3, r3, #11
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	4903      	ldr	r1, [pc, #12]	; (8000a30 <MCAL_RCC_Get_PCLK2Freq+0x24>)
 8000a22:	5ccb      	ldrb	r3, [r1, r3]
 8000a24:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	08000dbc 	.word	0x08000dbc

08000a34 <MCAL_UART_GPIO_Set_Pins>:
#include "Stm32_F103C6_USART.h"

USART_CONFIG_t* Global_UART_Config  = NULL ;


void MCAL_UART_GPIO_Set_Pins (USART_t *USARTx){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T PinCfg ;

		if ( USARTx == USART1 )
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d118      	bne.n	8000a76 <MCAL_UART_GPIO_Set_Pins+0x42>
			//PA10 RX
			//PA11 CTS
			//PA12 RTS

			//PA9 TX
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_9;
 8000a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a48:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4825      	ldr	r0, [pc, #148]	; (8000af0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a5a:	f7ff feed 	bl	8000838 <MCAL_GPIO_Init>

			//PA10 RX
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a64:	2308      	movs	r3, #8
 8000a66:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a70:	f7ff fee2 	bl	8000838 <MCAL_GPIO_Init>
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
				MCAL_GPIO_Init(GPIOB, &PinCfg);

			}
		}
}
 8000a74:	e036      	b.n	8000ae4 <MCAL_UART_GPIO_Set_Pins+0xb0>
		else if ( USARTx == USART2 )
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d116      	bne.n	8000aac <MCAL_UART_GPIO_Set_Pins+0x78>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_2;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a82:	2306      	movs	r3, #6
 8000a84:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a86:	2301      	movs	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a92:	f7ff fed1 	bl	8000838 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_3;
 8000a96:	2308      	movs	r3, #8
 8000a98:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000aa6:	f7ff fec7 	bl	8000838 <MCAL_GPIO_Init>
}
 8000aaa:	e01b      	b.n	8000ae4 <MCAL_UART_GPIO_Set_Pins+0xb0>
		else if ( USARTx == USART3 )
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d117      	bne.n	8000ae4 <MCAL_UART_GPIO_Set_Pins+0xb0>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8000ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000aba:	2306      	movs	r3, #6
 8000abc:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000aca:	f7ff feb5 	bl	8000838 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8000ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ad2:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000ae0:	f7ff feaa 	bl	8000838 <MCAL_GPIO_Init>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40004800 	.word	0x40004800
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <MCAL_USART_Init>:
 * @param[in]	- USARTx: Where x can be (1...3) to select the USART peripheral
 * @param[in]	- USARTx_config: Pointer to USART_CONFIG_t structure that contains the configurations of USART peripheral
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_USART_Init(USART_t *USARTx , USART_CONFIG_t *USARTx_config){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
	Global_UART_Config = USARTx_config;
 8000b0a:	4a58      	ldr	r2, [pc, #352]	; (8000c6c <MCAL_USART_Init+0x16c>)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral
	if(USARTx == USART1){RCC_USART1_CLK_EN();}
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a57      	ldr	r2, [pc, #348]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <MCAL_USART_Init+0x26>
 8000b18:	4b56      	ldr	r3, [pc, #344]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a55      	ldr	r2, [pc, #340]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	e014      	b.n	8000b50 <MCAL_USART_Init+0x50>
	else if(USARTx == USART2){RCC_USART2_CLK_EN();}
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a53      	ldr	r2, [pc, #332]	; (8000c78 <MCAL_USART_Init+0x178>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <MCAL_USART_Init+0x3c>
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	e009      	b.n	8000b50 <MCAL_USART_Init+0x50>
	else if(USARTx == USART3){RCC_USART3_CLK_EN();}
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4f      	ldr	r2, [pc, #316]	; (8000c7c <MCAL_USART_Init+0x17c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d105      	bne.n	8000b50 <MCAL_USART_Init+0x50>
 8000b44:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a4a      	ldr	r2, [pc, #296]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4e:	61d3      	str	r3, [r2, #28]

	//enable USART
	USARTx ->CR1 |= (1<<13);//Bit 13 UE: USART enable
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	//enable USART mode
	USARTx ->CR1 |= USARTx_config->USART_Mode;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	7892      	ldrb	r2, [r2, #2]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60da      	str	r2, [r3, #12]
	//Parity selection
	USARTx ->CR1 |= USARTx_config->Parity;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	7912      	ldrb	r2, [r2, #4]
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60da      	str	r2, [r3, #12]
	//M: Word length
	USARTx ->CR1 |= USARTx_config->Word_Length;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	78d2      	ldrb	r2, [r2, #3]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
	// STOP: STOP bits
	USARTx ->CR2 |= USARTx_config->Stop_Bits;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	7852      	ldrb	r2, [r2, #1]
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	611a      	str	r2, [r3, #16]
	//Hardware flow control
	USARTx ->CR3 |= USARTx_config->HW_FLW_CTRL;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	7992      	ldrb	r2, [r2, #6]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if(USARTx == USART1){pclk = MCAL_RCC_Get_PCLK2Freq();}
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a32      	ldr	r2, [pc, #200]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d103      	bne.n	8000bb2 <MCAL_USART_Init+0xb2>
 8000baa:	f7ff ff2f 	bl	8000a0c <MCAL_RCC_Get_PCLK2Freq>
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	e002      	b.n	8000bb8 <MCAL_USART_Init+0xb8>
	else {
		pclk = MCAL_RCC_Get_PCLK1Freq();
 8000bb2:	f7ff ff17 	bl	80009e4 <MCAL_RCC_Get_PCLK1Freq>
 8000bb6:	60f8      	str	r0, [r7, #12]
	}
	BRR = UART_BRR_Register(pclk, USARTx_config->Baud_Rate );
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bc6:	0119      	lsls	r1, r3, #4
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bec:	2064      	movs	r0, #100	; 0x64
 8000bee:	fb00 f303 	mul.w	r3, r0, r3
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	095b      	lsrs	r3, r3, #5
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	430b      	orrs	r3, r1
 8000c04:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	609a      	str	r2, [r3, #8]
	//configure interrupt
	if(USARTx_config->IRQ_Enable != USART_IRQ_NONE ){
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d026      	beq.n	8000c62 <MCAL_USART_Init+0x162>
		USARTx ->CR1 |= USARTx_config->IRQ_Enable;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	7952      	ldrb	r2, [r2, #5]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60da      	str	r2, [r3, #12]
		//enable NVIC
		if(USARTx == USART1){NVIC_IRQ37_USART1_ENABLE;}
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d106      	bne.n	8000c38 <MCAL_USART_Init+0x138>
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MCAL_USART_Init+0x184>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <MCAL_USART_Init+0x184>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2){NVIC_IRQ38_USART2_ENABLE;}
		else if(USARTx == USART3){NVIC_IRQ39_USART3_ENABLE;}
	}
}
 8000c36:	e014      	b.n	8000c62 <MCAL_USART_Init+0x162>
		else if(USARTx == USART2){NVIC_IRQ38_USART2_ENABLE;}
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <MCAL_USART_Init+0x178>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d106      	bne.n	8000c4e <MCAL_USART_Init+0x14e>
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MCAL_USART_Init+0x184>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MCAL_USART_Init+0x184>)
 8000c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	e009      	b.n	8000c62 <MCAL_USART_Init+0x162>
		else if(USARTx == USART3){NVIC_IRQ39_USART3_ENABLE;}
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <MCAL_USART_Init+0x17c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <MCAL_USART_Init+0x162>
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MCAL_USART_Init+0x184>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <MCAL_USART_Init+0x184>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	6013      	str	r3, [r2, #0]
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000060 	.word	0x20000060
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	e000e104 	.word	0xe000e104

08000c88 <MCAL_USART_Transmit>:
	3. Program the number of stop bits in USART_CR2.
	4. Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to takeplace. Configure the DMA register as explained in multibuffer communication.
	5. Select the desired baud rate using the USART_BRR register.
	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission.
 * */
void MCAL_USART_Transmit(USART_t * USARTx , uint16_t *Buffer,enum Polling_mechism PollingEn){
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	71fb      	strb	r3, [r7, #7]
	//7. Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this	for each data to be transmitted in case of single buffer.
	//8. After writing the last data into the USART_DR register, wait until TC=1. This indicates
	//that the transmission of the last frame is complete. This is required for instance when
	//the USART is disabled or enters the Halt mode to avoid corrupting the last
	//transmission
	if (PollingEn == enable)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d106      	bne.n	8000caa <MCAL_USART_Transmit+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 8000c9c:	bf00      	nop
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f9      	beq.n	8000c9e <MCAL_USART_Transmit+0x16>
	if(Global_UART_Config->Word_Length == USART_WordLength_9BIT){
		USARTx->DR = (*Buffer & (uint16_t) 0x01FF);
	}
	else{
		USARTx->DR = (*Buffer & (uint16_t) 0xFF);
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	605a      	str	r2, [r3, #4]
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <MCAL_USART_Transmit_String>:

void MCAL_USART_Transmit_String(USART_t* USARTx , uint8_t *Buffer ,enum Polling_mechism PollingEn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t Count = 0 ;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	75fb      	strb	r3, [r7, #23]
	//wait until TXE is set
	if(PollingEn == enable)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d112      	bne.n	8000cfe <MCAL_USART_Transmit_String+0x3e>
		while(!(USARTx->SR &(1<<7)));
 8000cd8:	bf00      	nop
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f9      	beq.n	8000cda <MCAL_USART_Transmit_String+0x1a>
	while(Buffer[Count] != 0 )
 8000ce6:	e00a      	b.n	8000cfe <MCAL_USART_Transmit_String+0x3e>
	{
		MCAL_USART_Transmit(USART1, &Buffer[Count], enable);
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	4413      	add	r3, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <MCAL_USART_Transmit_String+0x54>)
 8000cf4:	f7ff ffc8 	bl	8000c88 <MCAL_USART_Transmit>
		Count++;
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	75fb      	strb	r3, [r7, #23]
	while(Buffer[Count] != 0 )
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1ee      	bne.n	8000ce8 <MCAL_USART_Transmit_String+0x28>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40013800 	.word	0x40013800

08000d18 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

	Global_UART_Config->IRQ_HANDLER();
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <USART1_IRQHandler+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	4798      	blx	r3

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000060 	.word	0x20000060

08000d2c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	Global_UART_Config->IRQ_HANDLER() ;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <USART2_IRQHandler+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	4798      	blx	r3

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000060 	.word	0x20000060

08000d40 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	Global_UART_Config->IRQ_HANDLER();
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <USART3_IRQHandler+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4798      	blx	r3


}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000060 	.word	0x20000060

08000d54 <__libc_init_array>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	2600      	movs	r6, #0
 8000d58:	4d0c      	ldr	r5, [pc, #48]	; (8000d8c <__libc_init_array+0x38>)
 8000d5a:	4c0d      	ldr	r4, [pc, #52]	; (8000d90 <__libc_init_array+0x3c>)
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	10a4      	asrs	r4, r4, #2
 8000d60:	42a6      	cmp	r6, r4
 8000d62:	d109      	bne.n	8000d78 <__libc_init_array+0x24>
 8000d64:	f000 f81a 	bl	8000d9c <_init>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	4d0a      	ldr	r5, [pc, #40]	; (8000d94 <__libc_init_array+0x40>)
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <__libc_init_array+0x44>)
 8000d6e:	1b64      	subs	r4, r4, r5
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	42a6      	cmp	r6, r4
 8000d74:	d105      	bne.n	8000d82 <__libc_init_array+0x2e>
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d7c:	4798      	blx	r3
 8000d7e:	3601      	adds	r6, #1
 8000d80:	e7ee      	b.n	8000d60 <__libc_init_array+0xc>
 8000d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d86:	4798      	blx	r3
 8000d88:	3601      	adds	r6, #1
 8000d8a:	e7f2      	b.n	8000d72 <__libc_init_array+0x1e>
 8000d8c:	08000dd4 	.word	0x08000dd4
 8000d90:	08000dd4 	.word	0x08000dd4
 8000d94:	08000dd4 	.word	0x08000dd4
 8000d98:	08000dd8 	.word	0x08000dd8

08000d9c <_init>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	bf00      	nop
 8000da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da2:	bc08      	pop	{r3}
 8000da4:	469e      	mov	lr, r3
 8000da6:	4770      	bx	lr

08000da8 <_fini>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr
